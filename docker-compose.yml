# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3.9'
 
# Define services
services:
  # App backend service
  api-gateway-server:
    # Configuration for building the docker image for the backend service
    build:
      context: server/ApiGateway # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8100" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - eureka-server
      - user-management-server
      - db # This service depends on mongodb. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATA_MONGODB_URI: mongodb://127.0.0.1/test
      SPRING_DATA_MONGODB_USERNAME: sreejith
      SPRING_DATA_MONGODB_PASSWORD: sreejith
      SERVER_PORT: 8100
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
  # App backend service
  config-server:
    # Configuration for building the docker image for the backend service
    build:
      context: server/ConfigServer # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8888:8888" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATA_MONGODB_URI: mongodb://127.0.0.1/test
      SPRING_DATA_MONGODB_USERNAME: sreejith
      SPRING_DATA_MONGODB_PASSWORD: sreejith
      SERVER_PORT: 8888
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
  # App backend service
  eureka-server:
    # Configuration for building the docker image for the backend service
    build:
      context: server/eurekaServer # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8761:8761" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATA_MONGODB_URI: mongodb://127.0.0.1/test
      SPRING_DATA_MONGODB_USERNAME: sreejith
      SPRING_DATA_MONGODB_PASSWORD: sreejith
      SERVER_PORT: 8761
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
  # App backend service
  
  user-management-server:
    # Configuration for building the docker image for the backend service
    build:
      context: server/UserManagementService # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8102:8102" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - eureka-server
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATA_MONGODB_URI: mongodb://127.0.0.1/test
      SPRING_DATA_MONGODB_USERNAME: sreejith
      SPRING_DATA_MONGODB_PASSWORD: sreejith
      SERVER_PORT: 8102
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
  # Frontend Service 
  app-client:
    build:
      context: ui # Use an image built from the specified dockerfile in the `angular-11-social-login` directory.
      dockerfile: Dockerfile
      args:
        API_BASE_URL: http://127.0.0.1:8080/
    ports:
      - "80:80" # Map the exposed port 80 on the container to port 8081 on the host machine
    restart: always
    depends_on:
      - api-gateway-server
    networks:
      - frontend  
 
  # Database Service (MongoDB)
  db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: sreejith
      MONGO_INITDB_ROOT_PASSWORD: sreejith
    networks:
      - backend  
   
# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: 